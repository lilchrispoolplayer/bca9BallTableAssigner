/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.bcaleaguetableassigner;

import java.awt.Component;
import java.awt.HeadlessException;
import java.io.BufferedWriter;
import javax.swing.JFileChooser;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Map;
import java.util.prefs.Preferences;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;

/**
 *
 * @author c_dra
 */
public class BcaLeagueTableAssignerUI extends javax.swing.JFrame {

    private static File lastDirectory = new File(System.getProperty("user.home")); // Default to user's home directory
    private JFileChooser fileChooser;
    private FileNameExtensionFilter excelFilter;
    private FileNameExtensionFilter csvFilter;

    /**
     * Creates new form Bca9BallTableAssignerUI
     */
    public BcaLeagueTableAssignerUI() {
        initComponents();
        try {
            File jarFile = new File(this.getClass().getProtectionDomain().getCodeSource().getLocation().toURI());
            File jarDirectory = jarFile.getParentFile();
            lastDirectory = jarDirectory;
            csvFilter = new FileNameExtensionFilter("CSV File", "csv");
            excelFilter = new FileNameExtensionFilter("Excel File", "xls", "xlsx");
        } catch (URISyntaxException use) {

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnLeagueScheduleFile = new javax.swing.JPanel();
        txtLeagueScheduleFile = new javax.swing.JTextField();
        btnBrowseLeagueScheduleFile = new javax.swing.JButton();
        btnGenerateTableAssignments = new javax.swing.JButton();
        scrPnlTableAssignment = new javax.swing.JScrollPane();
        tblTableAssignment = new javax.swing.JTable();
        btnExportTableAssignment = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BCA League Table Assigner");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        pnLeagueScheduleFile.setBorder(javax.swing.BorderFactory.createTitledBorder("League Schedule File"));

        txtLeagueScheduleFile.setEditable(false);

        btnBrowseLeagueScheduleFile.setText("Browse");
        btnBrowseLeagueScheduleFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseLeagueScheduleFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnLeagueScheduleFileLayout = new javax.swing.GroupLayout(pnLeagueScheduleFile);
        pnLeagueScheduleFile.setLayout(pnLeagueScheduleFileLayout);
        pnLeagueScheduleFileLayout.setHorizontalGroup(
            pnLeagueScheduleFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnLeagueScheduleFileLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtLeagueScheduleFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBrowseLeagueScheduleFile)
                .addContainerGap())
        );
        pnLeagueScheduleFileLayout.setVerticalGroup(
            pnLeagueScheduleFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnLeagueScheduleFileLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnLeagueScheduleFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLeagueScheduleFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBrowseLeagueScheduleFile))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnGenerateTableAssignments.setText("Generate Table Assignments");
        btnGenerateTableAssignments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateTableAssignmentsActionPerformed(evt);
            }
        });

        tblTableAssignment.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        tblTableAssignment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Week", "1", "2", "3", "4"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblTableAssignment.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblTableAssignment.setShowGrid(true);
        scrPnlTableAssignment.setViewportView(tblTableAssignment);

        btnExportTableAssignment.setText("Export Table Assignments");
        btnExportTableAssignment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportTableAssignmentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrPnlTableAssignment, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE)
                    .addComponent(pnLeagueScheduleFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnExportTableAssignment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnGenerateTableAssignments, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnLeagueScheduleFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnGenerateTableAssignments)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrPnlTableAssignment, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExportTableAssignment)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBrowseLeagueScheduleFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseLeagueScheduleFileActionPerformed
        if (openBrowseLeagueScheduleDialog() == JFileChooser.APPROVE_OPTION) {
            txtLeagueScheduleFile.setText(fileChooser.getSelectedFile().getAbsolutePath());
            lastDirectory = fileChooser.getSelectedFile().getParentFile();
        }
    }//GEN-LAST:event_btnBrowseLeagueScheduleFileActionPerformed

    private void btnGenerateTableAssignmentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateTableAssignmentsActionPerformed
        if (txtLeagueScheduleFile.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Select a League Schedule", "Information", JOptionPane.INFORMATION_MESSAGE);
            btnBrowseLeagueScheduleFile.requestFocusInWindow();
            return;
        }

        String scheduleFile = txtLeagueScheduleFile.getText();
        Schedule leagueSchedule = new Schedule(scheduleFile);
        if (!leagueSchedule.validateSchedule()) {
            JOptionPane.showMessageDialog(this,
                    String.format("""
                                  %s\r
                                  is not a valid league schedule.
                                  """,
                            txtLeagueScheduleFile.getText()),
                    "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        leagueSchedule.processSchedule();
        TableAssigner tableAssigner = new TableAssigner(leagueSchedule);
        
        DefaultTableModel model = tableAssigner.getTableAssignments();
        replaceTeamNumbersWithNames(leagueSchedule.getTeamNames(), model);
        tblTableAssignment.setModel(model);
        tblTableAssignment.getTableHeader().setDefaultRenderer(new TableHeaderBorderRenderer());

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        for (int i = 0; i < tblTableAssignment.getColumnModel().getColumnCount(); i++) {
            tblTableAssignment.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
        autoResizeColumns(tblTableAssignment);
    }//GEN-LAST:event_btnGenerateTableAssignmentsActionPerformed

    private void btnExportTableAssignmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportTableAssignmentActionPerformed
        if (tblTableAssignment.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "There are no table assignments to export!", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        try {
            int exportOption;
            int overwriteOption = JOptionPane.YES_OPTION;
            String filePath = "";
            do {
                exportOption = openExportTableAssignmentsDialog();
                if (exportOption != JFileChooser.APPROVE_OPTION) {
                    return;
                }

                filePath = fileChooser.getSelectedFile().getAbsoluteFile().getAbsolutePath();
                if (!filePath.toLowerCase().endsWith(".csv")) {
                    filePath += ".csv";
                }

                File selectedFile = new File(filePath);
                if (selectedFile.exists()) {
                    overwriteOption = JOptionPane.showConfirmDialog(this,
                            "File already exists. Do you want to overwrite it?",
                            "Overwrite Confirmation",
                            JOptionPane.YES_NO_OPTION);
                }
            } while (exportOption == JFileChooser.APPROVE_OPTION && overwriteOption != JOptionPane.YES_OPTION);

            TableModel model = tblTableAssignment.getModel();
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {

                // Write header row
                for (int col = 0; col < model.getColumnCount(); col++) {
                    writer.write(model.getColumnName(col));
                    if (col < model.getColumnCount() - 1) {
                        writer.write(",");
                    }
                }
                writer.newLine();

                // Write data rows
                for (int row = 0; row < model.getRowCount(); row++) {
                    for (int col = 0; col < model.getColumnCount(); col++) {
                        Object value = model.getValueAt(row, col);
                        writer.write(value == null ? "" : value.toString());
                        if (col < model.getColumnCount() - 1) {
                            writer.write(",");
                        }
                    }
                    writer.newLine();
                }
            }
            JOptionPane.showMessageDialog(this, "Export Complete!", "Information", JOptionPane.INFORMATION_MESSAGE);
        } catch (HeadlessException | IOException e) {

        }
    }//GEN-LAST:event_btnExportTableAssignmentActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        Preferences prefs = Preferences.userNodeForPackage(this.getClass());
        prefs.putInt("windowWidth", this.getWidth());
        prefs.putInt("windowHeight", this.getHeight());
        prefs.putInt("windowX", this.getX());
        prefs.putInt("windowY", this.getY());
    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        Preferences prefs = Preferences.userNodeForPackage(this.getClass());
        int width = prefs.getInt("windowWidth", 800); // Default width
        int height = prefs.getInt("windowHeight", 600); // Default height
        int x = prefs.getInt("windowX", 100); // Default X position
        int y = prefs.getInt("windowY", 100); // Default Y position
        this.setSize(width, height);
        this.setLocation(x, y);
    }//GEN-LAST:event_formWindowOpened

    private void autoResizeColumns(JTable table) {
        for (int column = 0; column < table.getColumnCount(); column++) {
            int maxWidth = 0;
            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer renderer = table.getCellRenderer(row, column);
                Component component = table.prepareRenderer(renderer, row, column);
                maxWidth = Math.max(maxWidth, component.getPreferredSize().width);
            }
            table.getColumnModel().getColumn(column).setPreferredWidth(maxWidth);
        }
    }

    private int openBrowseLeagueScheduleDialog() {
        fileChooser = new JFileChooser();    
        fileChooser.setDialogTitle("Select League CSV To Load");
        fileChooser.setCurrentDirectory(lastDirectory);
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.addChoosableFileFilter(excelFilter);
        
        return fileChooser.showOpenDialog(this);
    }
    
    private int openExportTableAssignmentsDialog() {
        fileChooser = new JFileChooser();    
        fileChooser.setDialogTitle("Export Table Assignments");
        fileChooser.setCurrentDirectory(lastDirectory);
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.addChoosableFileFilter(csvFilter);
  
        return fileChooser.showSaveDialog(this);
    }
    
    private void replaceTeamNumbersWithNames(Map<String, String> teamNames, DefaultTableModel model) {
        int longestTeamNameLength = teamNames.values().stream().max(Comparator.comparingInt(String::length)).get().length();
        for (int i = 0; i < model.getRowCount(); i++) {
            for (int j = 0; j < model.getColumnCount(); j++) {
                if (model.getValueAt(i, j) == null ||
                    (model.getValueAt(i, j) != null &&
                    !model.getValueAt(i, j).toString().contains("@"))) {
                    continue;
                }
                
                String leagueMatch = model.getValueAt(i, j).toString().trim();
                String[] teamNumbers = leagueMatch.split(" @ ");
                String awayTeamName = teamNames.get(teamNumbers[0]);
                String homeTeamName = teamNames.get(teamNumbers[1]);
                
                if (homeTeamName.matches("^BYE\\d+.*")) {
                    leagueMatch = String.format("%" + longestTeamNameLength + "s @ %-" + longestTeamNameLength 
                        + "s", homeTeamName, awayTeamName);
                } else {
                    leagueMatch = String.format("%" + longestTeamNameLength + "s @ %-" + longestTeamNameLength 
                        + "s", awayTeamName, homeTeamName);
                }
                
                model.setValueAt(leagueMatch, i, j);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if (UIManager.getSystemLookAndFeelClassName().equals(info.getClassName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BcaLeagueTableAssignerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new BcaLeagueTableAssignerUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowseLeagueScheduleFile;
    private javax.swing.JButton btnExportTableAssignment;
    private javax.swing.JButton btnGenerateTableAssignments;
    private javax.swing.JPanel pnLeagueScheduleFile;
    private javax.swing.JScrollPane scrPnlTableAssignment;
    private javax.swing.JTable tblTableAssignment;
    private javax.swing.JTextField txtLeagueScheduleFile;
    // End of variables declaration//GEN-END:variables
}
